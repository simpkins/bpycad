import typing as _typing


class Matrix(_typing.Sequence[Vector]):
    def __init__(
        self,
        rows: Matrix | _typing.Sequence[_typing.Sequence[float]],
    ) -> None: ...

    @classmethod
    def Rotation(
        cls, angle: float, size: int, axis: str | Vector = ...
    ) -> Matrix: ...

    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Vector: ...

    @_typing.overload
    def __matmul__(self, value: Matrix) -> Matrix: ...
    @_typing.overload
    def __matmul__(self, value: Vector) -> Vector: ...
    @_typing.overload
    def __matmul__(self, value: Quaternion) -> Quaternion: ...
    def __matmul__(
        self, value: Matrix | Vector | Quaternion
    ) -> Matrix | Vector | Quaternion: ...


class Vector(_typing.Sequence[float]):
    x: float
    y: float
    z: float
    w: float

    def __init__(self, rows: _typing.Sequence[float]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...


class Quaternion: ...


class Euler:
    def __init__(
        self, angles: _typing.Sequence[float], order: str
    ) -> None: ...
